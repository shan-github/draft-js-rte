[{"D:\\Project\\ReactJS\\draft-js-ex\\src\\App.js":"1","D:\\Project\\ReactJS\\draft-js-ex\\src\\components\\TextEditor.js":"2","D:\\Project\\ReactJS\\draft-js-ex\\src\\index.js":"3"},{"size":132,"mtime":1609225150672,"results":"4","hashOfConfig":"5"},{"size":8821,"mtime":1609491388748,"results":"6","hashOfConfig":"5"},{"size":506,"mtime":1609226626271,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1clgdvq",{"filePath":"10","messages":"11","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Project\\ReactJS\\draft-js-ex\\src\\App.js",[],"D:\\Project\\ReactJS\\draft-js-ex\\src\\components\\TextEditor.js",["15","16","17","18","19","20","21"],"import React, {\r\n  createRef,\r\n  useCallback,\r\n  useEffect,\r\n  useMemo,\r\n  useState,\r\n} from 'react'\r\nimport {\r\n  CompositeDecorator,\r\n  Editor,\r\n  EditorState,\r\n  Modifier,\r\n  RichUtils,\r\n  AtomicBlockUtils,\r\n} from 'draft-js'\r\nimport { IoEye, IoEyeOff, IoLink } from 'react-icons/io5'\r\nimport {\r\n  blockStylesMap,\r\n  customBlockStyleFn,\r\n  customInlineStylesMap,\r\n  entityStylesMap,\r\n  inlineStylesMap,\r\n} from './EditorConfig'\r\n\r\nlet currentContent\r\nconst MediaBlock = props => {\r\n  const ekey = props.block.getEntityAt(0)\r\n  const { src, mediaClickCallback } = ekey\r\n    ? props.contentState.getEntity(ekey).getData()\r\n    : {}\r\n  return (\r\n    <img\r\n      src={src}\r\n      onClick={e => {\r\n        mediaClickCallback && mediaClickCallback(e)\r\n      }}\r\n      style={{ width: '50%' }}\r\n    />\r\n  )\r\n}\r\nconst LinkComponent = props => {\r\n  const { url } = props.contentState.getEntity(props.entityKey).getData()\r\n  // console.log(props)\r\n  return (\r\n    <a href={url} target='_blank' className='inline-link'>\r\n      {props.children}\r\n      <span className='link-text'>\r\n        <IoLink /> {url}\r\n      </span>\r\n    </a>\r\n  )\r\n}\r\nconst linkStrategy = (contentBlock, cb, contentState) => {\r\n  let entityKey\r\n  contentBlock.findEntityRanges(\r\n    ch =>\r\n      (entityKey = ch.getEntity()) &&\r\n      contentState.getEntity(entityKey).getType() === 'LINK',\r\n    cb\r\n  )\r\n}\r\nconst decorator = new CompositeDecorator([\r\n  {\r\n    strategy: linkStrategy,\r\n    component: LinkComponent,\r\n  },\r\n])\r\n\r\nexport default function TextEditor() {\r\n  const [editorState, setEditorState] = useState(\r\n    EditorState.createEmpty(decorator)\r\n  )\r\n  const [isPreview, setIsPreview] = useState(false)\r\n  const [inlineToolbar, setInlineToolbar] = useState({ image: true })\r\n\r\n  const editorRef = useMemo(() => createRef(null), [])\r\n  const onEditorStateChange = useCallback(\r\n    newState => setEditorState(newState),\r\n    []\r\n  )\r\n  const getCurrentEntityKey = () => {\r\n    currentContent = editorState.getCurrentContent()\r\n    return currentContent\r\n      .getBlockForKey(editorState.getSelection().getStartKey())\r\n      .getEntityAt(editorState.getSelection().getStartOffset())\r\n  }\r\n  const getCurrentEntity = entityKey => {\r\n    currentContent = editorState.getCurrentContent()\r\n    return currentContent.getEntity(entityKey)\r\n  }\r\n  const mergeEntityData = (data, entityKey) =>\r\n    EditorState.push(\r\n      editorState,\r\n      Modifier.applyEntity(\r\n        currentContent.mergeEntityData(entityKey, data),\r\n        editorState.getSelection(),\r\n        entityKey\r\n      ),\r\n      'change-block-data'\r\n    )\r\n\r\n  const editorStats = useMemo(\r\n    () => ({\r\n      currentInlineStyles: editorState.getCurrentInlineStyle().toArray(),\r\n      currentBlockStyles: [RichUtils.getCurrentBlockType(editorState)],\r\n      currentEntityType: (k => (k ? getCurrentEntity(k).getType() : null))(\r\n        getCurrentEntityKey()\r\n      ),\r\n    }),\r\n    [editorState]\r\n  )\r\n\r\n  useEffect(() => {\r\n    if (!isPreview && editorRef.current) editorRef.current.focus()\r\n  }, [isPreview])\r\n\r\n  // console.log(editorStats.currentEntityType)\r\n\r\n  const handleImageClick = e => {\r\n    const { offsetTop, offsetLeft, offsetHeight, offsetWidth } = e.target\r\n    setInlineToolbar({\r\n      image: {\r\n        top: offsetTop,\r\n        left: offsetLeft,\r\n        height: offsetHeight,\r\n        width: offsetWidth,\r\n      },\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    console.log('-----------')\r\n    // currentContent = editorState.getCurrentContent()\r\n    setInlineToolbar({ image: null })\r\n    console.log('-----------')\r\n  }, [editorState])\r\n\r\n  const handleLinkCreation = () => {\r\n    const eKey = getCurrentEntityKey()\r\n    const url = window.prompt(\r\n      'Enter a link',\r\n      eKey ? getCurrentEntity(eKey).getData().url : ''\r\n    )\r\n    if (\r\n      url &&\r\n      /https?\\:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)/g.test(\r\n        url\r\n      )\r\n    ) {\r\n      if (eKey) onEditorStateChange(mergeEntityData({ url }, eKey))\r\n      else {\r\n        // currentContent = editorState.getCurrentContent()\r\n        const newContent = currentContent.createEntity('LINK', 'MUTABLE', {\r\n          url,\r\n        })\r\n        onEditorStateChange(\r\n          RichUtils.toggleLink(\r\n            EditorState.push(editorState, newContent, 'create-entity'),\r\n            editorState.getSelection(),\r\n            newContent.getLastCreatedEntityKey()\r\n          )\r\n        )\r\n      }\r\n    } else window.alert('Invalid url entered!')\r\n  }\r\n\r\n  const handleMediaCreation = (eType, data) => {\r\n    let srcData\r\n    currentContent = editorState.getCurrentContent()\r\n    srcData = data || window.prompt('Paste Image Link')\r\n    currentContent = editorState.getCurrentContent()\r\n    const contentStateWithEntity = currentContent.createEntity(\r\n      eType,\r\n      'IMMUTABLE',\r\n      { src: srcData, mediaClickCallback: handleImageClick }\r\n    )\r\n    onEditorStateChange(\r\n      AtomicBlockUtils.insertAtomicBlock(\r\n        EditorState.set(\r\n          editorState,\r\n          { currentContent: contentStateWithEntity },\r\n          'create-entity'\r\n        ),\r\n        contentStateWithEntity.getLastCreatedEntityKey(),\r\n        ' '\r\n      )\r\n    )\r\n  }\r\n\r\n  const handleInlineStyle = type => e => {\r\n    e.preventDefault()\r\n    onEditorStateChange(RichUtils.toggleInlineStyle(editorState, type))\r\n  }\r\n\r\n  const handleBlockStyle = type => e => {\r\n    e.preventDefault()\r\n    onEditorStateChange(RichUtils.toggleBlockType(editorState, type))\r\n  }\r\n\r\n  const getInlineSelectionClass = type =>\r\n    editorStats.currentInlineStyles.includes(type) ? 'selected' : ''\r\n  const getBlockSelectionClass = type =>\r\n    editorStats.currentBlockStyles.includes(type) ? 'selected' : ''\r\n  const getEntitySelectionClass = type =>\r\n    editorStats.currentEntityType === type ? 'selected' : ''\r\n\r\n  const handleEntityCreation = eType => e => {\r\n    e.preventDefault()\r\n    if (eType === 'LINK') handleLinkCreation()\r\n    else handleMediaCreation(eType)\r\n  }\r\n\r\n  return (\r\n    <div className='text-editor'>\r\n      <div className='t-toolbar'>\r\n        <ul>\r\n          {inlineStylesMap.map(im => (\r\n            <li\r\n              className={`${\r\n                isPreview ? 'o-disabled' : ''\r\n              } ${getInlineSelectionClass(im.inlineStyle)} ${\r\n                im.divider ? 't-div' : ''\r\n              }`}\r\n              onClick={handleInlineStyle(im.inlineStyle)}>\r\n              {im.content}\r\n              <span className='t-ttip'>{im.text}</span>\r\n            </li>\r\n          ))}\r\n          {entityStylesMap.map(em => (\r\n            <li\r\n              className={`${\r\n                isPreview ? 'o-disabled' : ''\r\n              } ${getEntitySelectionClass(em.entityType)} ${\r\n                em.divider ? 't-div' : ''\r\n              }`}\r\n              onClick={handleEntityCreation(em.entityType)}>\r\n              {em.content}\r\n              <span className='t-ttip'>{em.text}</span>\r\n            </li>\r\n          ))}\r\n          <li\r\n            // className={isPreview ? 'selected' : ''}\r\n            onClick={() => setIsPreview(p => !p)}>\r\n            {isPreview ? <IoEyeOff /> : <IoEye />}\r\n            <span className='t-ttip'>Preview</span>\r\n          </li>\r\n        </ul>\r\n        <ul>\r\n          {blockStylesMap.map(bm => (\r\n            <li\r\n              className={`${\r\n                isPreview ? 'o-disabled' : ''\r\n              } ${getBlockSelectionClass(bm.blockStyle)} ${\r\n                bm.divider ? 't-div' : ''\r\n              }`}\r\n              onClick={handleBlockStyle(bm.blockStyle)}>\r\n              {bm.content}\r\n              <span className='t-ttip'>{bm.text}</span>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n      <div className='editor-wrapper'>\r\n        {inlineToolbar.image && (\r\n          <ul style={{ ...inlineToolbar.image }} className='inline-toolbar'>\r\n            <li></li>\r\n          </ul>\r\n        )}\r\n        <Editor\r\n          readOnly={isPreview}\r\n          editorState={editorState}\r\n          ref={editorRef}\r\n          onChange={onEditorStateChange}\r\n          blockStyleFn={customBlockStyleFn}\r\n          blockRendererFn={block =>\r\n            block.getType() === 'atomic'\r\n              ? {\r\n                  component: MediaBlock,\r\n                  editable: false,\r\n                }\r\n              : null\r\n          }\r\n          customStyleMap={customInlineStylesMap}\r\n          handlePastedFiles={files => {\r\n            if (files[0].type.includes('image')) {\r\n              const f = new FileReader()\r\n              f.onload = () => {\r\n                handleMediaCreation('image', f.result)\r\n              }\r\n              f.readAsDataURL(files[0])\r\n            }\r\n          }}\r\n        />\r\n      </div>\r\n\r\n      {/* <div className='spacer' /> */}\r\n    </div>\r\n  )\r\n}\r\n","D:\\Project\\ReactJS\\draft-js-ex\\src\\index.js",[],{"ruleId":"22","severity":1,"message":"23","line":32,"column":5,"nodeType":"24","endLine":38,"endColumn":7},{"ruleId":"25","severity":1,"message":"26","line":45,"column":19,"nodeType":"27","endLine":45,"endColumn":34},{"ruleId":"28","severity":1,"message":"29","line":110,"column":5,"nodeType":"30","endLine":110,"endColumn":18,"suggestions":"31"},{"ruleId":"28","severity":1,"message":"32","line":115,"column":6,"nodeType":"30","endLine":115,"endColumn":17,"suggestions":"33"},{"ruleId":"34","severity":1,"message":"35","line":146,"column":14,"nodeType":"36","messageId":"37","endLine":146,"endColumn":15,"suggestions":"38"},{"ruleId":"34","severity":1,"message":"39","line":146,"column":44,"nodeType":"36","messageId":"37","endLine":146,"endColumn":45,"suggestions":"40"},{"ruleId":"34","severity":1,"message":"39","line":146,"column":97,"nodeType":"36","messageId":"37","endLine":146,"endColumn":98,"suggestions":"41"},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","react-hooks/exhaustive-deps","React Hook useMemo has missing dependencies: 'getCurrentEntity' and 'getCurrentEntityKey'. Either include them or remove the dependency array.","ArrayExpression",["42"],"React Hook useEffect has a missing dependency: 'editorRef'. Either include it or remove the dependency array.",["43"],"no-useless-escape","Unnecessary escape character: \\:.","Literal","unnecessaryEscape",["44","45"],"Unnecessary escape character: \\+.",["46","47"],["48","49"],{"desc":"50","fix":"51"},{"desc":"52","fix":"53"},{"messageId":"54","fix":"55","desc":"56"},{"messageId":"57","fix":"58","desc":"59"},{"messageId":"54","fix":"60","desc":"56"},{"messageId":"57","fix":"61","desc":"59"},{"messageId":"54","fix":"62","desc":"56"},{"messageId":"57","fix":"63","desc":"59"},"Update the dependencies array to be: [editorState, getCurrentEntity, getCurrentEntityKey]",{"range":"64","text":"65"},"Update the dependencies array to be: [editorRef, isPreview]",{"range":"66","text":"67"},"removeEscape",{"range":"68","text":"69"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"70","text":"71"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"72","text":"69"},{"range":"73","text":"71"},{"range":"74","text":"69"},{"range":"75","text":"71"},[2920,2933],"[editorState, getCurrentEntity, getCurrentEntityKey]",[3036,3047],"[editorRef, isPreview]",[3827,3828],"",[3827,3827],"\\",[3857,3858],[3857,3857],[3910,3911],[3910,3910]]